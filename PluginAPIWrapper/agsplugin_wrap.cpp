/* This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */ 
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */
#include "ScriptManagedObject.h"
#include "ManagedObjectReader.h"
#include "FontRenderer.h"
#define SWIGCSHARP

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types:
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_agsplugin(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback,
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback,
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback,
                                                SWIG_CSharpExceptionCallback_t overflowCallback,
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_agsplugin(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_agsplugin(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


 /* Includes the header in the wrapper code */
 #include "agsplugin.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT FontRenderer* SWIGSTDCALL FontRenderer_Create(
    LoadFromDiskCallback lfdc, FreeMemoryCallback fmc,
    SupportsExtendedCharactersCallback secc, GetTextWidthCallback gtwc,
    GetTextHeightCallback gthc, RenderTextCallback rtc, AdjustYCoordinateForFontCallback acffc,
    EnsureTextValidForFontCallback etvffc)
{
    return new FontRenderer(lfdc, fmc, secc, gtwc, gthc, rtc, acffc, etvffc);
}

SWIGEXPORT void SWIGSTDCALL FontRenderer_Delete(FontRenderer* obj)
{
    delete obj;
}

SWIGEXPORT ScriptManagedObject* SWIGSTDCALL ScriptManagedObject_Create(DisposeCallback dc, GetTypeCallback gtc, SerializeCallback sc)
{
    return new ScriptManagedObject(dc, gtc, sc);
}

SWIGEXPORT void SWIGSTDCALL ScriptManagedObject_Delete(ScriptManagedObject* obj)
{
    delete obj;
}

SWIGEXPORT ManagedObjectReader* SWIGSTDCALL ManagedObjectReader_Create(UnserializeCallback usc)
{
    return new ManagedObjectReader(usc);
}

SWIGEXPORT void SWIGSTDCALL ManagedObjectReader_Delete(ManagedObjectReader* obj)
{
    delete obj;
}

SWIGEXPORT void SWIGSTDCALL CSharp_AGSColor_r_set(void * jarg1, unsigned char jarg2) {
  AGSColor *arg1 = (AGSColor *) 0 ;
  unsigned char arg2 ;

  arg1 = (AGSColor *)jarg1;
  arg2 = (unsigned char)jarg2;
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AGSColor_r_get(void * jarg1) {
  unsigned char jresult ;
  AGSColor *arg1 = (AGSColor *) 0 ;
  unsigned char result;

  arg1 = (AGSColor *)jarg1;
  result = (unsigned char) ((arg1)->r);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSColor_g_set(void * jarg1, unsigned char jarg2) {
  AGSColor *arg1 = (AGSColor *) 0 ;
  unsigned char arg2 ;

  arg1 = (AGSColor *)jarg1;
  arg2 = (unsigned char)jarg2;
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AGSColor_g_get(void * jarg1) {
  unsigned char jresult ;
  AGSColor *arg1 = (AGSColor *) 0 ;
  unsigned char result;

  arg1 = (AGSColor *)jarg1;
  result = (unsigned char) ((arg1)->g);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSColor_b_set(void * jarg1, unsigned char jarg2) {
  AGSColor *arg1 = (AGSColor *) 0 ;
  unsigned char arg2 ;

  arg1 = (AGSColor *)jarg1;
  arg2 = (unsigned char)jarg2;
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AGSColor_b_get(void * jarg1) {
  unsigned char jresult ;
  AGSColor *arg1 = (AGSColor *) 0 ;
  unsigned char result;

  arg1 = (AGSColor *)jarg1;
  result = (unsigned char) ((arg1)->b);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSColor_padding_set(void * jarg1, unsigned char jarg2) {
  AGSColor *arg1 = (AGSColor *) 0 ;
  unsigned char arg2 ;

  arg1 = (AGSColor *)jarg1;
  arg2 = (unsigned char)jarg2;
  if (arg1) (arg1)->padding = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AGSColor_padding_get(void * jarg1) {
  unsigned char jresult ;
  AGSColor *arg1 = (AGSColor *) 0 ;
  unsigned char result;

  arg1 = (AGSColor *)jarg1;
  result = (unsigned char) ((arg1)->padding);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AGSColor() {
  void * jresult ;
  AGSColor *result = 0 ;

  result = (AGSColor *)new AGSColor();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AGSColor(void * jarg1) {
  AGSColor *arg1 = (AGSColor *) 0 ;

  arg1 = (AGSColor *)jarg1;
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_score_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_score_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->score);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_usedmode_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->usedmode = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_usedmode_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->usedmode);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_disabled_user_interface_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->disabled_user_interface = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_disabled_user_interface_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->disabled_user_interface);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_gscript_timer_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->gscript_timer = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_gscript_timer_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->gscript_timer);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_debug_mode_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->debug_mode = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_debug_mode_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->debug_mode);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_globalvars_set(void * jarg1, void * jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long *arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long *)jarg2;
  {
    size_t ii;
    long *b = (long *) arg1->globalvars;
    for (ii = 0; ii < (size_t)50; ii++) b[ii] = *((long *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AGSGameOptions_globalvars_get(void * jarg1) {
  void * jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long *result = 0 ;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long *)(long *) ((arg1)->globalvars);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_messagetime_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->messagetime = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_messagetime_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->messagetime);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_usedinv_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->usedinv = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_usedinv_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->usedinv);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_inv_top_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->inv_top = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_inv_top_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->inv_top);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_inv_numdisp_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->inv_numdisp = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_inv_numdisp_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->inv_numdisp);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_inv_numorder_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->inv_numorder = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_inv_numorder_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->inv_numorder);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_inv_numinline_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->inv_numinline = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_inv_numinline_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->inv_numinline);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_text_speed_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->text_speed = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_text_speed_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->text_speed);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_sierra_inv_color_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->sierra_inv_color = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_sierra_inv_color_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->sierra_inv_color);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_talkanim_speed_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->talkanim_speed = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_talkanim_speed_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->talkanim_speed);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_inv_item_wid_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->inv_item_wid = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_inv_item_wid_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->inv_item_wid);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_inv_item_hit_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->inv_item_hit = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_inv_item_hit_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->inv_item_hit);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_speech_text_shadow_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->speech_text_shadow = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_speech_text_shadow_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->speech_text_shadow);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_swap_portrait_side_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->swap_portrait_side = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_swap_portrait_side_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->swap_portrait_side);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_speech_textwindow_gui_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->speech_textwindow_gui = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_speech_textwindow_gui_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->speech_textwindow_gui);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_follow_change_room_timer_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->follow_change_room_timer = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_follow_change_room_timer_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->follow_change_room_timer);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_totalscore_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->totalscore = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_totalscore_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->totalscore);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_skip_display_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->skip_display = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_skip_display_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->skip_display);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_no_multiloop_repeat_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->no_multiloop_repeat = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_no_multiloop_repeat_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->no_multiloop_repeat);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_roomscript_finished_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->roomscript_finished = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_roomscript_finished_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->roomscript_finished);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_used_inv_on_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->used_inv_on = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_used_inv_on_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->used_inv_on);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_no_textbg_when_voice_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->no_textbg_when_voice = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_no_textbg_when_voice_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->no_textbg_when_voice);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_max_dialogoption_width_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->max_dialogoption_width = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_max_dialogoption_width_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->max_dialogoption_width);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_no_hicolor_fadein_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->no_hicolor_fadein = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_no_hicolor_fadein_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->no_hicolor_fadein);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_bgspeech_game_speed_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->bgspeech_game_speed = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_bgspeech_game_speed_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->bgspeech_game_speed);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_bgspeech_stay_on_display_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->bgspeech_stay_on_display = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_bgspeech_stay_on_display_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->bgspeech_stay_on_display);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_unfactor_speech_from_textlength_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->unfactor_speech_from_textlength = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_unfactor_speech_from_textlength_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->unfactor_speech_from_textlength);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_mp3_loop_before_end_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->mp3_loop_before_end = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_mp3_loop_before_end_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->mp3_loop_before_end);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_speech_music_drop_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->speech_music_drop = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_speech_music_drop_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->speech_music_drop);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_in_cutscene_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->in_cutscene = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_in_cutscene_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->in_cutscene);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_fast_forward_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->fast_forward = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_fast_forward_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->fast_forward);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_room_width_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->room_width = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_room_width_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->room_width);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSGameOptions_room_height_set(void * jarg1, long jarg2) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long arg2 ;

  arg1 = (AGSGameOptions *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->room_height = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSGameOptions_room_height_get(void * jarg1) {
  long jresult ;
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;
  long result;

  arg1 = (AGSGameOptions *)jarg1;
  result = (long) ((arg1)->room_height);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AGSGameOptions() {
  void * jresult ;
  AGSGameOptions *result = 0 ;

  result = (AGSGameOptions *)new AGSGameOptions();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AGSGameOptions(void * jarg1) {
  AGSGameOptions *arg1 = (AGSGameOptions *) 0 ;

  arg1 = (AGSGameOptions *)jarg1;
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_defview_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->defview = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_defview_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->defview);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_talkview_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->talkview = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_talkview_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->talkview);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_view_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->view = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_view_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->view);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_room_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->room = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_room_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->room);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_prevroom_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->prevroom = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_prevroom_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->prevroom);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_x_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_x_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->x);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_y_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_y_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->y);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_wait_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->wait = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_wait_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->wait);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_flags_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_flags_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->flags);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_following_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->following = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_following_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->following);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_followinfo_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->followinfo = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_followinfo_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->followinfo);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_idleview_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->idleview = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_idleview_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->idleview);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_idletime_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->idletime = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_idletime_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->idletime);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_idleleft_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->idleleft = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_idleleft_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->idleleft);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_transparency_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->transparency = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_transparency_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->transparency);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_baseline_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->baseline = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_baseline_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->baseline);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_activeinv_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->activeinv = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_activeinv_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->activeinv);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_talkcolor_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->talkcolor = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_talkcolor_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->talkcolor);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_thinkview_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->thinkview = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_thinkview_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->thinkview);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_reserved_set(void * jarg1, void * jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long *arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long *)jarg2;
  {
    size_t ii;
    long *b = (long *) arg1->reserved;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((long *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AGSCharacter_reserved_get(void * jarg1) {
  void * jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long *result = 0 ;

  arg1 = (AGSCharacter *)jarg1;
  result = (long *)(long *) ((arg1)->reserved);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_walkspeed_y_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->walkspeed_y = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_walkspeed_y_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->walkspeed_y);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_pic_yoffs_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->pic_yoffs = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_pic_yoffs_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->pic_yoffs);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_z_set(void * jarg1, long jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSCharacter_z_get(void * jarg1) {
  long jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long result;

  arg1 = (AGSCharacter *)jarg1;
  result = (long) ((arg1)->z);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_reserved2_set(void * jarg1, void * jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long *arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (long *)jarg2;
  {
    size_t ii;
    long *b = (long *) arg1->reserved2;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((long *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AGSCharacter_reserved2_get(void * jarg1) {
  void * jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  long *result = 0 ;

  arg1 = (AGSCharacter *)jarg1;
  result = (long *)(long *) ((arg1)->reserved2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_loop_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->loop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_loop_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->loop);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_frame_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->frame = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_frame_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->frame);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_walking_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->walking = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_walking_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->walking);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_animating_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->animating = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_animating_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->animating);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_walkspeed_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->walkspeed = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_walkspeed_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->walkspeed);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_animspeed_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->animspeed = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_animspeed_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->animspeed);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_inv_set(void * jarg1, void * jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short *arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short *)jarg2;
  {
    size_t ii;
    short *b = (short *) arg1->inv;
    for (ii = 0; ii < (size_t)301; ii++) b[ii] = *((short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AGSCharacter_inv_get(void * jarg1) {
  void * jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short *result = 0 ;

  arg1 = (AGSCharacter *)jarg1;
  result = (short *)(short *) ((arg1)->inv);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_actx_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->actx = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_actx_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->actx);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_acty_set(void * jarg1, short jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->acty = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSCharacter_acty_get(void * jarg1) {
  short jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  short result;

  arg1 = (AGSCharacter *)jarg1;
  result = (short) ((arg1)->acty);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_name_set(void * jarg1, char * jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  char *arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (char *)jarg2;
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 40-1);
      arg1->name[40-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AGSCharacter_name_get(void * jarg1) {
  char * jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  char *result = 0 ;

  arg1 = (AGSCharacter *)jarg1;
  result = (char *)(char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_scrname_set(void * jarg1, char * jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  char *arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (char *)jarg2;
  {
    if(arg2) {
      strncpy((char*)arg1->scrname, (const char *)arg2, 20-1);
      arg1->scrname[20-1] = 0;
    } else {
      arg1->scrname[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AGSCharacter_scrname_get(void * jarg1) {
  char * jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  char *result = 0 ;

  arg1 = (AGSCharacter *)jarg1;
  result = (char *)(char *) ((arg1)->scrname);
  jresult = SWIG_csharp_string_callback((const char *)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSCharacter_on_set(void * jarg1, char jarg2) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  char arg2 ;

  arg1 = (AGSCharacter *)jarg1;
  arg2 = (char)jarg2;
  if (arg1) (arg1)->on = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_AGSCharacter_on_get(void * jarg1) {
  char jresult ;
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;
  char result;

  arg1 = (AGSCharacter *)jarg1;
  result = (char) ((arg1)->on);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AGSCharacter() {
  void * jresult ;
  AGSCharacter *result = 0 ;

  result = (AGSCharacter *)new AGSCharacter();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AGSCharacter(void * jarg1) {
  AGSCharacter *arg1 = (AGSCharacter *) 0 ;

  arg1 = (AGSCharacter *)jarg1;
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_x_set(void * jarg1, long jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  long arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSObject_x_get(void * jarg1) {
  long jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  long result;

  arg1 = (AGSObject *)jarg1;
  result = (long) ((arg1)->x);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_y_set(void * jarg1, long jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  long arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSObject_y_get(void * jarg1) {
  long jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  long result;

  arg1 = (AGSObject *)jarg1;
  result = (long) ((arg1)->y);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_transparent_set(void * jarg1, long jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  long arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->transparent = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSObject_transparent_get(void * jarg1) {
  long jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  long result;

  arg1 = (AGSObject *)jarg1;
  result = (long) ((arg1)->transparent);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_reserved_set(void * jarg1, void * jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  long *arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (long *)jarg2;
  {
    size_t ii;
    long *b = (long *) arg1->reserved;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((long *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AGSObject_reserved_get(void * jarg1) {
  void * jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  long *result = 0 ;

  arg1 = (AGSObject *)jarg1;
  result = (long *)(long *) ((arg1)->reserved);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_num_set(void * jarg1, short jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  short arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->num = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSObject_num_get(void * jarg1) {
  short jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  short result;

  arg1 = (AGSObject *)jarg1;
  result = (short) ((arg1)->num);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_baseline_set(void * jarg1, short jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  short arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->baseline = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSObject_baseline_get(void * jarg1) {
  short jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  short result;

  arg1 = (AGSObject *)jarg1;
  result = (short) ((arg1)->baseline);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_view_set(void * jarg1, short jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  short arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->view = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSObject_view_get(void * jarg1) {
  short jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  short result;

  arg1 = (AGSObject *)jarg1;
  result = (short) ((arg1)->view);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_loop_set(void * jarg1, short jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  short arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->loop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSObject_loop_get(void * jarg1) {
  short jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  short result;

  arg1 = (AGSObject *)jarg1;
  result = (short) ((arg1)->loop);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_frame_set(void * jarg1, short jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  short arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->frame = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSObject_frame_get(void * jarg1) {
  short jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  short result;

  arg1 = (AGSObject *)jarg1;
  result = (short) ((arg1)->frame);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_wait_set(void * jarg1, short jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  short arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->wait = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSObject_wait_get(void * jarg1) {
  short jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  short result;

  arg1 = (AGSObject *)jarg1;
  result = (short) ((arg1)->wait);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_moving_set(void * jarg1, short jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  short arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->moving = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSObject_moving_get(void * jarg1) {
  short jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  short result;

  arg1 = (AGSObject *)jarg1;
  result = (short) ((arg1)->moving);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_cycling_set(void * jarg1, char jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  char arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (char)jarg2;
  if (arg1) (arg1)->cycling = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_AGSObject_cycling_get(void * jarg1) {
  char jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  char result;

  arg1 = (AGSObject *)jarg1;
  result = (char) ((arg1)->cycling);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_overall_speed_set(void * jarg1, char jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  char arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (char)jarg2;
  if (arg1) (arg1)->overall_speed = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_AGSObject_overall_speed_get(void * jarg1) {
  char jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  char result;

  arg1 = (AGSObject *)jarg1;
  result = (char) ((arg1)->overall_speed);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_on_set(void * jarg1, char jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  char arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (char)jarg2;
  if (arg1) (arg1)->on = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_AGSObject_on_get(void * jarg1) {
  char jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  char result;

  arg1 = (AGSObject *)jarg1;
  result = (char) ((arg1)->on);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSObject_flags_set(void * jarg1, char jarg2) {
  AGSObject *arg1 = (AGSObject *) 0 ;
  char arg2 ;

  arg1 = (AGSObject *)jarg1;
  arg2 = (char)jarg2;
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_AGSObject_flags_get(void * jarg1) {
  char jresult ;
  AGSObject *arg1 = (AGSObject *) 0 ;
  char result;

  arg1 = (AGSObject *)jarg1;
  result = (char) ((arg1)->flags);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AGSObject() {
  void * jresult ;
  AGSObject *result = 0 ;

  result = (AGSObject *)new AGSObject();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AGSObject(void * jarg1) {
  AGSObject *arg1 = (AGSObject *) 0 ;

  arg1 = (AGSObject *)jarg1;
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSViewFrame_pic_set(void * jarg1, long jarg2) {
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  long arg2 ;

  arg1 = (AGSViewFrame *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->pic = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSViewFrame_pic_get(void * jarg1) {
  long jresult ;
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  long result;

  arg1 = (AGSViewFrame *)jarg1;
  result = (long) ((arg1)->pic);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSViewFrame_xoffs_set(void * jarg1, short jarg2) {
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  short arg2 ;

  arg1 = (AGSViewFrame *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->xoffs = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSViewFrame_xoffs_get(void * jarg1) {
  short jresult ;
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  short result;

  arg1 = (AGSViewFrame *)jarg1;
  result = (short) ((arg1)->xoffs);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSViewFrame_yoffs_set(void * jarg1, short jarg2) {
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  short arg2 ;

  arg1 = (AGSViewFrame *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->yoffs = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSViewFrame_yoffs_get(void * jarg1) {
  short jresult ;
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  short result;

  arg1 = (AGSViewFrame *)jarg1;
  result = (short) ((arg1)->yoffs);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSViewFrame_speed_set(void * jarg1, short jarg2) {
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  short arg2 ;

  arg1 = (AGSViewFrame *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->speed = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSViewFrame_speed_get(void * jarg1) {
  short jresult ;
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  short result;

  arg1 = (AGSViewFrame *)jarg1;
  result = (short) ((arg1)->speed);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSViewFrame_flags_set(void * jarg1, long jarg2) {
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  long arg2 ;

  arg1 = (AGSViewFrame *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSViewFrame_flags_get(void * jarg1) {
  long jresult ;
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  long result;

  arg1 = (AGSViewFrame *)jarg1;
  result = (long) ((arg1)->flags);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSViewFrame_sound_set(void * jarg1, long jarg2) {
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  long arg2 ;

  arg1 = (AGSViewFrame *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->sound = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSViewFrame_sound_get(void * jarg1) {
  long jresult ;
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  long result;

  arg1 = (AGSViewFrame *)jarg1;
  result = (long) ((arg1)->sound);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSViewFrame_reserved_for_future_set(void * jarg1, void * jarg2) {
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  long *arg2 ;

  arg1 = (AGSViewFrame *)jarg1;
  arg2 = (long *)jarg2;
  {
    size_t ii;
    long *b = (long *) arg1->reserved_for_future;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((long *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AGSViewFrame_reserved_for_future_get(void * jarg1) {
  void * jresult ;
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;
  long *result = 0 ;

  arg1 = (AGSViewFrame *)jarg1;
  result = (long *)(long *) ((arg1)->reserved_for_future);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AGSViewFrame() {
  void * jresult ;
  AGSViewFrame *result = 0 ;

  result = (AGSViewFrame *)new AGSViewFrame();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AGSViewFrame(void * jarg1) {
  AGSViewFrame *arg1 = (AGSViewFrame *) 0 ;

  arg1 = (AGSViewFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSMouseCursor_pic_set(void * jarg1, long jarg2) {
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;
  long arg2 ;

  arg1 = (AGSMouseCursor *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->pic = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AGSMouseCursor_pic_get(void * jarg1) {
  long jresult ;
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;
  long result;

  arg1 = (AGSMouseCursor *)jarg1;
  result = (long) ((arg1)->pic);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSMouseCursor_hotx_set(void * jarg1, short jarg2) {
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;
  short arg2 ;

  arg1 = (AGSMouseCursor *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->hotx = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSMouseCursor_hotx_get(void * jarg1) {
  short jresult ;
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;
  short result;

  arg1 = (AGSMouseCursor *)jarg1;
  result = (short) ((arg1)->hotx);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSMouseCursor_hoty_set(void * jarg1, short jarg2) {
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;
  short arg2 ;

  arg1 = (AGSMouseCursor *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->hoty = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSMouseCursor_hoty_get(void * jarg1) {
  short jresult ;
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;
  short result;

  arg1 = (AGSMouseCursor *)jarg1;
  result = (short) ((arg1)->hoty);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSMouseCursor_view_set(void * jarg1, short jarg2) {
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;
  short arg2 ;

  arg1 = (AGSMouseCursor *)jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->view = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AGSMouseCursor_view_get(void * jarg1) {
  short jresult ;
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;
  short result;

  arg1 = (AGSMouseCursor *)jarg1;
  result = (short) ((arg1)->view);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSMouseCursor_name_set(void * jarg1, char * jarg2) {
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;
  char *arg2 ;

  arg1 = (AGSMouseCursor *)jarg1;
  arg2 = (char *)jarg2;
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 10-1);
      arg1->name[10-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AGSMouseCursor_name_get(void * jarg1) {
  char * jresult ;
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;
  char *result = 0 ;

  arg1 = (AGSMouseCursor *)jarg1;
  result = (char *)(char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AGSMouseCursor_flags_set(void * jarg1, char jarg2) {
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;
  char arg2 ;

  arg1 = (AGSMouseCursor *)jarg1;
  arg2 = (char)jarg2;
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_AGSMouseCursor_flags_get(void * jarg1) {
  char jresult ;
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;
  char result;

  arg1 = (AGSMouseCursor *)jarg1;
  result = (char) ((arg1)->flags);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AGSMouseCursor() {
  void * jresult ;
  AGSMouseCursor *result = 0 ;

  result = (AGSMouseCursor *)new AGSMouseCursor();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AGSMouseCursor(void * jarg1) {
  AGSMouseCursor *arg1 = (AGSMouseCursor *) 0 ;

  arg1 = (AGSMouseCursor *)jarg1;
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEditor_version_set(void * jarg1, long jarg2) {
  IAGSEditor *arg1 = (IAGSEditor *) 0 ;
  long arg2 ;

  arg1 = (IAGSEditor *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IAGSEditor_version_get(void * jarg1) {
  long jresult ;
  IAGSEditor *arg1 = (IAGSEditor *) 0 ;
  long result;

  arg1 = (IAGSEditor *)jarg1;
  result = (long) ((arg1)->version);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEditor_pluginId_set(void * jarg1, long jarg2) {
  IAGSEditor *arg1 = (IAGSEditor *) 0 ;
  long arg2 ;

  arg1 = (IAGSEditor *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->pluginId = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IAGSEditor_pluginId_get(void * jarg1) {
  long jresult ;
  IAGSEditor *arg1 = (IAGSEditor *) 0 ;
  long result;

  arg1 = (IAGSEditor *)jarg1;
  result = (long) ((arg1)->pluginId);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEditor_GetEditorHandle(void * jarg1) {
  int jresult ;
  IAGSEditor *arg1 = (IAGSEditor *) 0 ;
  HWND result;

  arg1 = (IAGSEditor *)jarg1;
  result = (HWND)(arg1)->GetEditorHandle();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEditor_GetWindowHandle(void * jarg1) {
  int jresult ;
  IAGSEditor *arg1 = (IAGSEditor *) 0 ;
  HWND result;

  arg1 = (IAGSEditor *)jarg1;
  result = (HWND)(arg1)->GetWindowHandle();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEditor_RegisterScriptHeader(void * jarg1, char * jarg2) {
  IAGSEditor *arg1 = (IAGSEditor *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = (IAGSEditor *)jarg1;
  arg2 = (char *)jarg2;
  (arg1)->RegisterScriptHeader((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEditor_UnregisterScriptHeader(void * jarg1, char * jarg2) {
  IAGSEditor *arg1 = (IAGSEditor *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = (IAGSEditor *)jarg1;
  arg2 = (char *)jarg2;
  (arg1)->UnregisterScriptHeader((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAGSEditor(void * jarg1) {
  IAGSEditor *arg1 = (IAGSEditor *) 0 ;

  arg1 = (IAGSEditor *)jarg1;
  delete arg1;
}

SWIGEXPORT int SWIGSTDCALL CSharp_IAGSScriptManagedObject_Dispose(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  IAGSScriptManagedObject *arg1 = (IAGSScriptManagedObject *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int result;

  arg1 = (IAGSScriptManagedObject *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = jarg3 ? true : false;
  result = (int)(arg1)->Dispose((char const *)arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAGSScriptManagedObject_GetType(void * jarg1) {
  char * jresult ;
  IAGSScriptManagedObject *arg1 = (IAGSScriptManagedObject *) 0 ;
  char *result = 0 ;

  arg1 = (IAGSScriptManagedObject *)jarg1;
  result = (char *)(arg1)->GetType();
  jresult = SWIG_csharp_string_callback((const char *)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSScriptManagedObject_Serialize(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  int jresult ;
  IAGSScriptManagedObject *arg1 = (IAGSScriptManagedObject *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;

  arg1 = (IAGSScriptManagedObject *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (char *)jarg3;
  arg4 = (int)jarg4;
  result = (int)(arg1)->Serialize((char const *)arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAGSScriptManagedObject(void * jarg1) {
  IAGSScriptManagedObject *arg1 = (IAGSScriptManagedObject *) 0 ;

  arg1 = (IAGSScriptManagedObject *)jarg1;
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSManagedObjectReader_Unserialize(void * jarg1, int jarg2, char * jarg3, int jarg4) {
  IAGSManagedObjectReader *arg1 = (IAGSManagedObjectReader *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;

  arg1 = (IAGSManagedObjectReader *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (char *)jarg3;
  arg4 = (int)jarg4;
  (arg1)->Unserialize(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAGSManagedObjectReader(void * jarg1) {
  IAGSManagedObjectReader *arg1 = (IAGSManagedObjectReader *) 0 ;

  arg1 = (IAGSManagedObjectReader *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAGSFontRenderer_LoadFromDisk(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  IAGSFontRenderer *arg1 = (IAGSFontRenderer *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;

  arg1 = (IAGSFontRenderer *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (bool)(arg1)->LoadFromDisk(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSFontRenderer_FreeMemory(void * jarg1, int jarg2) {
  IAGSFontRenderer *arg1 = (IAGSFontRenderer *) 0 ;
  int arg2 ;

  arg1 = (IAGSFontRenderer *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->FreeMemory(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAGSFontRenderer_SupportsExtendedCharacters(void * jarg1, int jarg2) {
  unsigned int jresult ;
  IAGSFontRenderer *arg1 = (IAGSFontRenderer *) 0 ;
  int arg2 ;
  bool result;

  arg1 = (IAGSFontRenderer *)jarg1;
  arg2 = (int)jarg2;
  result = (bool)(arg1)->SupportsExtendedCharacters(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSFontRenderer_GetTextWidth(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  IAGSFontRenderer *arg1 = (IAGSFontRenderer *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;

  arg1 = (IAGSFontRenderer *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (int)jarg3;
  result = (int)(arg1)->GetTextWidth((char const *)arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSFontRenderer_GetTextHeight(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  IAGSFontRenderer *arg1 = (IAGSFontRenderer *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;

  arg1 = (IAGSFontRenderer *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (int)jarg3;
  result = (int)(arg1)->GetTextHeight((char const *)arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSFontRenderer_RenderText(void * jarg1, char * jarg2, int jarg3, char * jarg4, int jarg5, int jarg6, int jarg7) {
  IAGSFontRenderer *arg1 = (IAGSFontRenderer *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  BITMAP *arg4 = (BITMAP *) 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;

  arg1 = (IAGSFontRenderer *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (int)jarg3;
  arg4 = (BITMAP *)jarg4;
  arg5 = (int)jarg5;
  arg6 = (int)jarg6;
  arg7 = (int)jarg7;
  (arg1)->RenderText((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSFontRenderer_AdjustYCoordinateForFont(void * jarg1, void * jarg2, int jarg3) {
  IAGSFontRenderer *arg1 = (IAGSFontRenderer *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;

  arg1 = (IAGSFontRenderer *)jarg1;
  arg2 = (int *)jarg2;
  arg3 = (int)jarg3;
  (arg1)->AdjustYCoordinateForFont(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSFontRenderer_EnsureTextValidForFont(void * jarg1, char * jarg2, int jarg3) {
  IAGSFontRenderer *arg1 = (IAGSFontRenderer *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;

  arg1 = (IAGSFontRenderer *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (int)jarg3;
  (arg1)->EnsureTextValidForFont(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAGSFontRenderer(void * jarg1) {
  IAGSFontRenderer *arg1 = (IAGSFontRenderer *) 0 ;

  arg1 = (IAGSFontRenderer *)jarg1;
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_version_set(void * jarg1, long jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IAGSEngine_version_get(void * jarg1) {
  long jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long result;

  arg1 = (IAGSEngine *)jarg1;
  result = (long) ((arg1)->version);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_pluginId_set(void * jarg1, long jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->pluginId = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IAGSEngine_pluginId_get(void * jarg1) {
  long jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long result;

  arg1 = (IAGSEngine *)jarg1;
  result = (long) ((arg1)->pluginId);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_AbortGame(void * jarg1, char * jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  (arg1)->AbortGame((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAGSEngine_GetEngineVersion(void * jarg1) {
  char * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  result = (char *)(arg1)->GetEngineVersion();
  jresult = SWIG_csharp_string_callback((const char *)result);
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_RegisterScriptFunction(void * jarg1, char * jarg2, void * jarg3) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (void *)jarg3;
  (arg1)->RegisterScriptFunction((char const *)arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAGSEngine_GetScreen(void * jarg1) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  BITMAP *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  result = (BITMAP *)(arg1)->GetScreen();
  return result;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_RequestEventHook(void * jarg1, long jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  (arg1)->RequestEventHook(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetSavedData(void * jarg1, char * jarg2, long jarg3) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (long)jarg3;
  result = (int)(arg1)->GetSavedData(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAGSEngine_GetVirtualScreen(void * jarg1) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  BITMAP *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  result = (BITMAP *)(arg1)->GetVirtualScreen();
  return result;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_DrawText(void * jarg1, long jarg2, long jarg3, long jarg4, long jarg5, char * jarg6) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  char *arg6 = (char *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  arg5 = (long)jarg5;
  arg6 = (char *)jarg6;
  (arg1)->DrawText(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_GetScreenDimensions(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long *)jarg2;
  arg3 = (long *)jarg3;
  arg4 = (long *)jarg4;
  (arg1)->GetScreenDimensions(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAGSEngine_GetRawBitmapSurface(void * jarg1, char * jarg2) {
  void * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  BITMAP *arg2 = (BITMAP *) 0 ;
  unsigned char **result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (BITMAP *)jarg2;
  result = (unsigned char **)(arg1)->GetRawBitmapSurface(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_ReleaseBitmapSurface(void * jarg1, char * jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  BITMAP *arg2 = (BITMAP *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (BITMAP *)jarg2;
  (arg1)->ReleaseBitmapSurface(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_GetMousePosition(void * jarg1, void * jarg2, void * jarg3) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long *)jarg2;
  arg3 = (long *)jarg3;
  (arg1)->GetMousePosition(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetCurrentRoom(void * jarg1) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  result = (int)(arg1)->GetCurrentRoom();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetNumBackgrounds(void * jarg1) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  result = (int)(arg1)->GetNumBackgrounds();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetCurrentBackground(void * jarg1) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  result = (int)(arg1)->GetCurrentBackground();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAGSEngine_GetBackgroundScene(void * jarg1, long jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  BITMAP *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (BITMAP *)(arg1)->GetBackgroundScene(arg2);
  return result;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_GetBitmapDimensions(void * jarg1, char * jarg2, long * jarg3, long * jarg4, long * jarg5) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  BITMAP *arg2 = (BITMAP *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (BITMAP *)jarg2;
  (arg1)->GetBitmapDimensions(arg2,jarg3,jarg4,jarg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_FWrite(void * jarg1, void * jarg2, long jarg3, long jarg4) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  long arg4 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (void *)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  result = (int)(arg1)->FWrite(arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_FRead(void * jarg1, void * jarg2, long jarg3, long jarg4) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  long arg4 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (void *)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  result = (int)(arg1)->FRead(arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_DrawTextWrapped(void * jarg1, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, char * jarg7) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  char *arg7 = (char *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  arg5 = (long)jarg5;
  arg6 = (long)jarg6;
  arg7 = (char *)jarg7;
  (arg1)->DrawTextWrapped(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_SetVirtualScreen(void * jarg1, char * jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  BITMAP *arg2 = (BITMAP *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (BITMAP *)jarg2;
  (arg1)->SetVirtualScreen(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_LookupParserWord(void * jarg1, char * jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  result = (int)(arg1)->LookupParserWord((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_BlitBitmap(void * jarg1, long jarg2, long jarg3, char * jarg4, long jarg5) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  BITMAP *arg4 = (BITMAP *) 0 ;
  long arg5 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (BITMAP *)jarg4;
  arg5 = (long)jarg5;
  (arg1)->BlitBitmap(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_PollSystem(void * jarg1) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  (arg1)->PollSystem();
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetNumCharacters(void * jarg1) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  result = (int)(arg1)->GetNumCharacters();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAGSEngine_GetCharacter(void * jarg1, long jarg2) {
  void * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  AGSCharacter *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (AGSCharacter *)(arg1)->GetCharacter(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAGSEngine_GetGameOptions(void * jarg1) {
  void * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  AGSGameOptions *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  result = (AGSGameOptions *)(arg1)->GetGameOptions();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAGSEngine_GetPalette(void * jarg1) {
  void * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  AGSColor *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  result = (AGSColor *)(arg1)->GetPalette();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_SetPalette(void * jarg1, long jarg2, long jarg3, void * jarg4) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  AGSColor *arg4 = (AGSColor *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (AGSColor *)jarg4;
  (arg1)->SetPalette(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetPlayerCharacter(void * jarg1) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  result = (int)(arg1)->GetPlayerCharacter();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_RoomToViewport(void * jarg1, void * jarg2, void * jarg3) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long *)jarg2;
  arg3 = (long *)jarg3;
  (arg1)->RoomToViewport(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_ViewportToRoom(void * jarg1, void * jarg2, void * jarg3) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long *)jarg2;
  arg3 = (long *)jarg3;
  (arg1)->ViewportToRoom(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetNumObjects(void * jarg1) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  result = (int)(arg1)->GetNumObjects();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAGSEngine_GetObject(void * jarg1, long jarg2) {
  void * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  AGSObject *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (AGSObject *)(arg1)->GetObject(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAGSEngine_GetSpriteGraphic(void * jarg1, long jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  BITMAP *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (BITMAP *)(arg1)->GetSpriteGraphic(arg2);
  return result;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAGSEngine_CreateBlankBitmap(void * jarg1, long jarg2, long jarg3, long jarg4) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  BITMAP *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  result = (BITMAP *)(arg1)->CreateBlankBitmap(arg2,arg3,arg4);
  return result;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_FreeBitmap(void * jarg1, char * jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  BITMAP *arg2 = (BITMAP *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (BITMAP *)jarg2;
  (arg1)->FreeBitmap(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAGSEngine_GetRoomMask(void * jarg1, long jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  BITMAP *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (BITMAP *)(arg1)->GetRoomMask(arg2);
  return result;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAGSEngine_GetViewFrame(void * jarg1, long jarg2, long jarg3, long jarg4) {
  void * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  AGSViewFrame *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  result = (AGSViewFrame *)(arg1)->GetViewFrame(arg2,arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetWalkbehindBaseline(void * jarg1, long jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (int)(arg1)->GetWalkbehindBaseline(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAGSEngine_GetScriptFunctionAddress(void * jarg1, char * jarg2) {
  void * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  void *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  result = (void *)(arg1)->GetScriptFunctionAddress((char const *)arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetBitmapTransparentColor(void * jarg1, char * jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  BITMAP *arg2 = (BITMAP *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (BITMAP *)jarg2;
  result = (int)(arg1)->GetBitmapTransparentColor(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetAreaScaling(void * jarg1, long jarg2, long jarg3) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  result = (int)(arg1)->GetAreaScaling(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_IsGamePaused(void * jarg1) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  result = (int)(arg1)->IsGamePaused();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetRawPixelColor(void * jarg1, long jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (int)(arg1)->GetRawPixelColor(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetSpriteWidth(void * jarg1, long jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (int)(arg1)->GetSpriteWidth(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetSpriteHeight(void * jarg1, long jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (int)(arg1)->GetSpriteHeight(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_GetTextExtent(void * jarg1, long jarg2, char * jarg3, void * jarg4, void * jarg5) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  char *arg3 = (char *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (char *)jarg3;
  arg4 = (long *)jarg4;
  arg5 = (long *)jarg5;
  (arg1)->GetTextExtent(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_PrintDebugConsole(void * jarg1, char * jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  (arg1)->PrintDebugConsole((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_PlaySoundChannel(void * jarg1, long jarg2, long jarg3, long jarg4, long jarg5, char * jarg6) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  char *arg6 = (char *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  arg5 = (long)jarg5;
  arg6 = (char *)jarg6;
  (arg1)->PlaySoundChannel(arg2,arg3,arg4,arg5,(char const *)arg6);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_IsChannelPlaying(void * jarg1, long jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (int)(arg1)->IsChannelPlaying(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_MarkRegionDirty(void * jarg1, long jarg2, long jarg3, long jarg4, long jarg5) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  arg5 = (long)jarg5;
  (arg1)->MarkRegionDirty(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAGSEngine_GetMouseCursor(void * jarg1, long jarg2) {
  void * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  AGSMouseCursor *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (AGSMouseCursor *)(arg1)->GetMouseCursor(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_GetRawColorComponents(void * jarg1, long jarg2, long jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  long *arg6 = (long *) 0 ;
  long *arg7 = (long *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long *)jarg4;
  arg5 = (long *)jarg5;
  arg6 = (long *)jarg6;
  arg7 = (long *)jarg7;
  (arg1)->GetRawColorComponents(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_MakeRawColorPixel(void * jarg1, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  arg5 = (long)jarg5;
  arg6 = (long)jarg6;
  result = (int)(arg1)->MakeRawColorPixel(arg2,arg3,arg4,arg5,arg6);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetFontType(void * jarg1, long jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (int)(arg1)->GetFontType(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_CreateDynamicSprite(void * jarg1, long jarg2, long jarg3, long jarg4) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  result = (int)(arg1)->CreateDynamicSprite(arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_DeleteDynamicSprite(void * jarg1, long jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  (arg1)->DeleteDynamicSprite(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_IsSpriteAlphaBlended(void * jarg1, long jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (int)(arg1)->IsSpriteAlphaBlended(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_UnrequestEventHook(void * jarg1, long jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  (arg1)->UnrequestEventHook(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_BlitSpriteTranslucent(void * jarg1, long jarg2, long jarg3, char * jarg4, long jarg5) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  BITMAP *arg4 = (BITMAP *) 0 ;
  long arg5 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (BITMAP *)jarg4;
  arg5 = (long)jarg5;
  (arg1)->BlitSpriteTranslucent(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_BlitSpriteRotated(void * jarg1, long jarg2, long jarg3, char * jarg4, long jarg5) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  BITMAP *arg4 = (BITMAP *) 0 ;
  long arg5 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (BITMAP *)jarg4;
  arg5 = (long)jarg5;
  (arg1)->BlitSpriteRotated(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_DisableSound(void * jarg1) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  (arg1)->DisableSound();
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_CanRunScriptFunctionNow(void * jarg1) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  result = (int)(arg1)->CanRunScriptFunctionNow();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_CallGameScriptFunction__SWIG_0(void * jarg1, char * jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  long arg7 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  arg5 = (long)jarg5;
  arg6 = (long)jarg6;
  arg7 = (long)jarg7;
  result = (int)(arg1)->CallGameScriptFunction((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_CallGameScriptFunction__SWIG_1(void * jarg1, char * jarg2, long jarg3, long jarg4, long jarg5, long jarg6) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  arg5 = (long)jarg5;
  arg6 = (long)jarg6;
  result = (int)(arg1)->CallGameScriptFunction((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_CallGameScriptFunction__SWIG_2(void * jarg1, char * jarg2, long jarg3, long jarg4, long jarg5) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  arg5 = (long)jarg5;
  result = (int)(arg1)->CallGameScriptFunction((char const *)arg2,arg3,arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_CallGameScriptFunction__SWIG_3(void * jarg1, char * jarg2, long jarg3, long jarg4) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  result = (int)(arg1)->CallGameScriptFunction((char const *)arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_NotifySpriteUpdated(void * jarg1, long jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  (arg1)->NotifySpriteUpdated(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_SetSpriteAlphaBlended(void * jarg1, long jarg2, long jarg3) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  (arg1)->SetSpriteAlphaBlended(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_QueueGameScriptFunction__SWIG_0(void * jarg1, char * jarg2, long jarg3, long jarg4, long jarg5, long jarg6) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;
  long arg6 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  arg5 = (long)jarg5;
  arg6 = (long)jarg6;
  (arg1)->QueueGameScriptFunction((char const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_QueueGameScriptFunction__SWIG_1(void * jarg1, char * jarg2, long jarg3, long jarg4, long jarg5) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;
  long arg5 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  arg5 = (long)jarg5;
  (arg1)->QueueGameScriptFunction((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_QueueGameScriptFunction__SWIG_2(void * jarg1, char * jarg2, long jarg3, long jarg4) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  long arg4 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long)jarg4;
  (arg1)->QueueGameScriptFunction((char const *)arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_RegisterManagedObject(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  void *arg2 = (void *) 0 ;
  IAGSScriptManagedObject *arg3 = (IAGSScriptManagedObject *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (void *)jarg2;
  arg3 = (IAGSScriptManagedObject *)jarg3;
  result = (int)(arg1)->RegisterManagedObject((void const *)arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_AddManagedObjectReader(void * jarg1, char * jarg2, void * jarg3) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  IAGSManagedObjectReader *arg3 = (IAGSManagedObjectReader *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (IAGSManagedObjectReader *)jarg3;
  (arg1)->AddManagedObjectReader((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_RegisterUnserializedObject(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  IAGSScriptManagedObject *arg4 = (IAGSScriptManagedObject *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (void *)jarg3;
  arg4 = (IAGSScriptManagedObject *)jarg4;
  (arg1)->RegisterUnserializedObject(arg2,(void const *)arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAGSEngine_GetManagedObjectAddressByKey(void * jarg1, int jarg2) {
  void * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  int arg2 ;
  void *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (int)jarg2;
  result = (void *)(arg1)->GetManagedObjectAddressByKey(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetManagedObjectKeyByAddress(void * jarg1, char * jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  result = (int)(arg1)->GetManagedObjectKeyByAddress((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAGSEngine_CreateScriptString(void * jarg1, char * jarg2) {
  char * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  result = (char *)(arg1)->CreateScriptString((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_IncrementManagedObjectRefCount(void * jarg1, char * jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  result = (int)(arg1)->IncrementManagedObjectRefCount((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_DecrementManagedObjectRefCount(void * jarg1, char * jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  result = (int)(arg1)->DecrementManagedObjectRefCount((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_SetMousePosition(void * jarg1, long jarg2, long jarg3) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  (arg1)->SetMousePosition(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_SimulateMouseClick(void * jarg1, long jarg2) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  (arg1)->SimulateMouseClick(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetMovementPathWaypointCount(void * jarg1, long jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (int)(arg1)->GetMovementPathWaypointCount(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_GetMovementPathLastWaypoint(void * jarg1, long jarg2) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  result = (int)(arg1)->GetMovementPathLastWaypoint(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_GetMovementPathWaypointLocation(void * jarg1, long jarg2, long jarg3, void * jarg4, void * jarg5) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long *)jarg4;
  arg5 = (long *)jarg5;
  (arg1)->GetMovementPathWaypointLocation(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_GetMovementPathWaypointSpeed(void * jarg1, long jarg2, long jarg3, void * jarg4, void * jarg5) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  long arg2 ;
  long arg3 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (long)jarg3;
  arg4 = (long *)jarg4;
  arg5 = (long *)jarg5;
  (arg1)->GetMovementPathWaypointSpeed(arg2,arg3,arg4,arg5);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAGSEngine_GetGraphicsDriverID(void * jarg1) {
  char * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  result = (char *)(arg1)->GetGraphicsDriverID();
  jresult = SWIG_csharp_string_callback((const char *)result);
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAGSEngine_IsRunningUnderDebugger(void * jarg1) {
  int jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  int result;

  arg1 = (IAGSEngine *)jarg1;
  result = (int)(arg1)->IsRunningUnderDebugger();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_BreakIntoDebugger(void * jarg1) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  (arg1)->BreakIntoDebugger();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAGSEngine_GetPathToFileInCompiledFolder(void * jarg1, char * jarg2, char * jarg3) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (char *)jarg2;
  arg3 = (char *)jarg3;
  (arg1)->GetPathToFileInCompiledFolder((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAGSEngine_ReplaceFontRenderer(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;
  int arg2 ;
  IAGSFontRenderer *arg3 = (IAGSFontRenderer *) 0 ;
  IAGSFontRenderer *result = 0 ;

  arg1 = (IAGSEngine *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (IAGSFontRenderer *)jarg3;
  result = (IAGSFontRenderer *)(arg1)->ReplaceFontRenderer(arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAGSEngine(void * jarg1) {
  IAGSEngine *arg1 = (IAGSEngine *) 0 ;

  arg1 = (IAGSEngine *)jarg1;
  delete arg1;
}


#ifdef __cplusplus
}
#endif

